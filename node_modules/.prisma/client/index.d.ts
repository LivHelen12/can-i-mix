
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Specialist
 * 
 */
export type Specialist = {
  id: number
  name: string
  email: string
  password: string
  cpf: string
  mobile: string
  fieldOfWorkId: number
  educationId: number
  profession: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FieldOfWork
 * 
 */
export type FieldOfWork = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Education
 * 
 */
export type Education = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Substance
 * 
 */
export type Substance = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  firstSubstanceId: number
  secondSubstanceId: number
  recommendedId: number
  description: string
  content: string
  createdAt: Date
  updatedAt: Date
  specialistId: number
}

/**
 * Model Recommended
 * 
 */
export type Recommended = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Specialists
 * const specialists = await prisma.specialist.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Specialists
   * const specialists = await prisma.specialist.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.specialist`: Exposes CRUD operations for the **Specialist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specialists
    * const specialists = await prisma.specialist.findMany()
    * ```
    */
  get specialist(): Prisma.SpecialistDelegate<GlobalReject>;

  /**
   * `prisma.fieldOfWork`: Exposes CRUD operations for the **FieldOfWork** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FieldOfWorks
    * const fieldOfWorks = await prisma.fieldOfWork.findMany()
    * ```
    */
  get fieldOfWork(): Prisma.FieldOfWorkDelegate<GlobalReject>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<GlobalReject>;

  /**
   * `prisma.substance`: Exposes CRUD operations for the **Substance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Substances
    * const substances = await prisma.substance.findMany()
    * ```
    */
  get substance(): Prisma.SubstanceDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.recommended`: Exposes CRUD operations for the **Recommended** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendeds
    * const recommendeds = await prisma.recommended.findMany()
    * ```
    */
  get recommended(): Prisma.RecommendedDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Specialist: 'Specialist',
    FieldOfWork: 'FieldOfWork',
    Education: 'Education',
    Substance: 'Substance',
    Post: 'Post',
    Recommended: 'Recommended'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SpecialistCountOutputType
   */


  export type SpecialistCountOutputType = {
    posts: number
  }

  export type SpecialistCountOutputTypeSelect = {
    posts?: boolean
  }

  export type SpecialistCountOutputTypeGetPayload<S extends boolean | null | undefined | SpecialistCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SpecialistCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SpecialistCountOutputTypeArgs)
    ? SpecialistCountOutputType 
    : S extends { select: any } & (SpecialistCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SpecialistCountOutputType ? SpecialistCountOutputType[P] : never
  } 
      : SpecialistCountOutputType




  // Custom InputTypes

  /**
   * SpecialistCountOutputType without action
   */
  export type SpecialistCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SpecialistCountOutputType
     * 
    **/
    select?: SpecialistCountOutputTypeSelect | null
  }



  /**
   * Count Type FieldOfWorkCountOutputType
   */


  export type FieldOfWorkCountOutputType = {
    specialists: number
  }

  export type FieldOfWorkCountOutputTypeSelect = {
    specialists?: boolean
  }

  export type FieldOfWorkCountOutputTypeGetPayload<S extends boolean | null | undefined | FieldOfWorkCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FieldOfWorkCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FieldOfWorkCountOutputTypeArgs)
    ? FieldOfWorkCountOutputType 
    : S extends { select: any } & (FieldOfWorkCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FieldOfWorkCountOutputType ? FieldOfWorkCountOutputType[P] : never
  } 
      : FieldOfWorkCountOutputType




  // Custom InputTypes

  /**
   * FieldOfWorkCountOutputType without action
   */
  export type FieldOfWorkCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWorkCountOutputType
     * 
    **/
    select?: FieldOfWorkCountOutputTypeSelect | null
  }



  /**
   * Count Type EducationCountOutputType
   */


  export type EducationCountOutputType = {
    specialists: number
  }

  export type EducationCountOutputTypeSelect = {
    specialists?: boolean
  }

  export type EducationCountOutputTypeGetPayload<S extends boolean | null | undefined | EducationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EducationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EducationCountOutputTypeArgs)
    ? EducationCountOutputType 
    : S extends { select: any } & (EducationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EducationCountOutputType ? EducationCountOutputType[P] : never
  } 
      : EducationCountOutputType




  // Custom InputTypes

  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EducationCountOutputType
     * 
    **/
    select?: EducationCountOutputTypeSelect | null
  }



  /**
   * Count Type SubstanceCountOutputType
   */


  export type SubstanceCountOutputType = {
    firstSubstance: number
    secondSubstance: number
  }

  export type SubstanceCountOutputTypeSelect = {
    firstSubstance?: boolean
    secondSubstance?: boolean
  }

  export type SubstanceCountOutputTypeGetPayload<S extends boolean | null | undefined | SubstanceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SubstanceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SubstanceCountOutputTypeArgs)
    ? SubstanceCountOutputType 
    : S extends { select: any } & (SubstanceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SubstanceCountOutputType ? SubstanceCountOutputType[P] : never
  } 
      : SubstanceCountOutputType




  // Custom InputTypes

  /**
   * SubstanceCountOutputType without action
   */
  export type SubstanceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SubstanceCountOutputType
     * 
    **/
    select?: SubstanceCountOutputTypeSelect | null
  }



  /**
   * Count Type RecommendedCountOutputType
   */


  export type RecommendedCountOutputType = {
    posts: number
  }

  export type RecommendedCountOutputTypeSelect = {
    posts?: boolean
  }

  export type RecommendedCountOutputTypeGetPayload<S extends boolean | null | undefined | RecommendedCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RecommendedCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RecommendedCountOutputTypeArgs)
    ? RecommendedCountOutputType 
    : S extends { select: any } & (RecommendedCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RecommendedCountOutputType ? RecommendedCountOutputType[P] : never
  } 
      : RecommendedCountOutputType




  // Custom InputTypes

  /**
   * RecommendedCountOutputType without action
   */
  export type RecommendedCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RecommendedCountOutputType
     * 
    **/
    select?: RecommendedCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Specialist
   */


  export type AggregateSpecialist = {
    _count: SpecialistCountAggregateOutputType | null
    _avg: SpecialistAvgAggregateOutputType | null
    _sum: SpecialistSumAggregateOutputType | null
    _min: SpecialistMinAggregateOutputType | null
    _max: SpecialistMaxAggregateOutputType | null
  }

  export type SpecialistAvgAggregateOutputType = {
    id: number | null
    fieldOfWorkId: number | null
    educationId: number | null
  }

  export type SpecialistSumAggregateOutputType = {
    id: number | null
    fieldOfWorkId: number | null
    educationId: number | null
  }

  export type SpecialistMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    cpf: string | null
    mobile: string | null
    fieldOfWorkId: number | null
    educationId: number | null
    profession: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpecialistMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    cpf: string | null
    mobile: string | null
    fieldOfWorkId: number | null
    educationId: number | null
    profession: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpecialistCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    cpf: number
    mobile: number
    fieldOfWorkId: number
    educationId: number
    profession: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SpecialistAvgAggregateInputType = {
    id?: true
    fieldOfWorkId?: true
    educationId?: true
  }

  export type SpecialistSumAggregateInputType = {
    id?: true
    fieldOfWorkId?: true
    educationId?: true
  }

  export type SpecialistMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    cpf?: true
    mobile?: true
    fieldOfWorkId?: true
    educationId?: true
    profession?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpecialistMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    cpf?: true
    mobile?: true
    fieldOfWorkId?: true
    educationId?: true
    profession?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpecialistCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    cpf?: true
    mobile?: true
    fieldOfWorkId?: true
    educationId?: true
    profession?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SpecialistAggregateArgs = {
    /**
     * Filter which Specialist to aggregate.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specialists
    **/
    _count?: true | SpecialistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecialistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecialistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecialistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecialistMaxAggregateInputType
  }

  export type GetSpecialistAggregateType<T extends SpecialistAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialist[P]>
      : GetScalarType<T[P], AggregateSpecialist[P]>
  }




  export type SpecialistGroupByArgs = {
    where?: SpecialistWhereInput
    orderBy?: Enumerable<SpecialistOrderByWithAggregationInput>
    by: Array<SpecialistScalarFieldEnum>
    having?: SpecialistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecialistCountAggregateInputType | true
    _avg?: SpecialistAvgAggregateInputType
    _sum?: SpecialistSumAggregateInputType
    _min?: SpecialistMinAggregateInputType
    _max?: SpecialistMaxAggregateInputType
  }


  export type SpecialistGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    fieldOfWorkId: number
    educationId: number
    profession: string
    createdAt: Date
    updatedAt: Date
    _count: SpecialistCountAggregateOutputType | null
    _avg: SpecialistAvgAggregateOutputType | null
    _sum: SpecialistSumAggregateOutputType | null
    _min: SpecialistMinAggregateOutputType | null
    _max: SpecialistMaxAggregateOutputType | null
  }

  type GetSpecialistGroupByPayload<T extends SpecialistGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SpecialistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecialistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecialistGroupByOutputType[P]>
            : GetScalarType<T[P], SpecialistGroupByOutputType[P]>
        }
      >
    >


  export type SpecialistSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    cpf?: boolean
    mobile?: boolean
    fieldOfWorkId?: boolean
    educationId?: boolean
    profession?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | Specialist$postsArgs
    fieldOfWork?: boolean | FieldOfWorkArgs
    education?: boolean | EducationArgs
    _count?: boolean | SpecialistCountOutputTypeArgs
  }


  export type SpecialistInclude = {
    posts?: boolean | Specialist$postsArgs
    fieldOfWork?: boolean | FieldOfWorkArgs
    education?: boolean | EducationArgs
    _count?: boolean | SpecialistCountOutputTypeArgs
  } 

  export type SpecialistGetPayload<S extends boolean | null | undefined | SpecialistArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Specialist :
    S extends undefined ? never :
    S extends { include: any } & (SpecialistArgs | SpecialistFindManyArgs)
    ? Specialist  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'fieldOfWork' ? FieldOfWorkGetPayload<S['include'][P]> :
        P extends 'education' ? EducationGetPayload<S['include'][P]> :
        P extends '_count' ? SpecialistCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SpecialistArgs | SpecialistFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'fieldOfWork' ? FieldOfWorkGetPayload<S['select'][P]> :
        P extends 'education' ? EducationGetPayload<S['select'][P]> :
        P extends '_count' ? SpecialistCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Specialist ? Specialist[P] : never
  } 
      : Specialist


  type SpecialistCountArgs = Merge<
    Omit<SpecialistFindManyArgs, 'select' | 'include'> & {
      select?: SpecialistCountAggregateInputType | true
    }
  >

  export interface SpecialistDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Specialist that matches the filter.
     * @param {SpecialistFindUniqueArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecialistFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SpecialistFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Specialist'> extends True ? Prisma__SpecialistClient<SpecialistGetPayload<T>> : Prisma__SpecialistClient<SpecialistGetPayload<T> | null, null>

    /**
     * Find one Specialist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SpecialistFindUniqueOrThrowArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecialistFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SpecialistFindUniqueOrThrowArgs>
    ): Prisma__SpecialistClient<SpecialistGetPayload<T>>

    /**
     * Find the first Specialist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindFirstArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecialistFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SpecialistFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Specialist'> extends True ? Prisma__SpecialistClient<SpecialistGetPayload<T>> : Prisma__SpecialistClient<SpecialistGetPayload<T> | null, null>

    /**
     * Find the first Specialist that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindFirstOrThrowArgs} args - Arguments to find a Specialist
     * @example
     * // Get one Specialist
     * const specialist = await prisma.specialist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecialistFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SpecialistFindFirstOrThrowArgs>
    ): Prisma__SpecialistClient<SpecialistGetPayload<T>>

    /**
     * Find zero or more Specialists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specialists
     * const specialists = await prisma.specialist.findMany()
     * 
     * // Get first 10 Specialists
     * const specialists = await prisma.specialist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specialistWithIdOnly = await prisma.specialist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecialistFindManyArgs>(
      args?: SelectSubset<T, SpecialistFindManyArgs>
    ): PrismaPromise<Array<SpecialistGetPayload<T>>>

    /**
     * Create a Specialist.
     * @param {SpecialistCreateArgs} args - Arguments to create a Specialist.
     * @example
     * // Create one Specialist
     * const Specialist = await prisma.specialist.create({
     *   data: {
     *     // ... data to create a Specialist
     *   }
     * })
     * 
    **/
    create<T extends SpecialistCreateArgs>(
      args: SelectSubset<T, SpecialistCreateArgs>
    ): Prisma__SpecialistClient<SpecialistGetPayload<T>>

    /**
     * Delete a Specialist.
     * @param {SpecialistDeleteArgs} args - Arguments to delete one Specialist.
     * @example
     * // Delete one Specialist
     * const Specialist = await prisma.specialist.delete({
     *   where: {
     *     // ... filter to delete one Specialist
     *   }
     * })
     * 
    **/
    delete<T extends SpecialistDeleteArgs>(
      args: SelectSubset<T, SpecialistDeleteArgs>
    ): Prisma__SpecialistClient<SpecialistGetPayload<T>>

    /**
     * Update one Specialist.
     * @param {SpecialistUpdateArgs} args - Arguments to update one Specialist.
     * @example
     * // Update one Specialist
     * const specialist = await prisma.specialist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecialistUpdateArgs>(
      args: SelectSubset<T, SpecialistUpdateArgs>
    ): Prisma__SpecialistClient<SpecialistGetPayload<T>>

    /**
     * Delete zero or more Specialists.
     * @param {SpecialistDeleteManyArgs} args - Arguments to filter Specialists to delete.
     * @example
     * // Delete a few Specialists
     * const { count } = await prisma.specialist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecialistDeleteManyArgs>(
      args?: SelectSubset<T, SpecialistDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specialists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specialists
     * const specialist = await prisma.specialist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecialistUpdateManyArgs>(
      args: SelectSubset<T, SpecialistUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Specialist.
     * @param {SpecialistUpsertArgs} args - Arguments to update or create a Specialist.
     * @example
     * // Update or create a Specialist
     * const specialist = await prisma.specialist.upsert({
     *   create: {
     *     // ... data to create a Specialist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Specialist we want to update
     *   }
     * })
    **/
    upsert<T extends SpecialistUpsertArgs>(
      args: SelectSubset<T, SpecialistUpsertArgs>
    ): Prisma__SpecialistClient<SpecialistGetPayload<T>>

    /**
     * Count the number of Specialists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistCountArgs} args - Arguments to filter Specialists to count.
     * @example
     * // Count the number of Specialists
     * const count = await prisma.specialist.count({
     *   where: {
     *     // ... the filter for the Specialists we want to count
     *   }
     * })
    **/
    count<T extends SpecialistCountArgs>(
      args?: Subset<T, SpecialistCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecialistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Specialist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecialistAggregateArgs>(args: Subset<T, SpecialistAggregateArgs>): PrismaPromise<GetSpecialistAggregateType<T>>

    /**
     * Group by Specialist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecialistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecialistGroupByArgs['orderBy'] }
        : { orderBy?: SpecialistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecialistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecialistGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Specialist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SpecialistClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    posts<T extends Specialist$postsArgs= {}>(args?: Subset<T, Specialist$postsArgs>): PrismaPromise<Array<PostGetPayload<T>>| Null>;

    fieldOfWork<T extends FieldOfWorkArgs= {}>(args?: Subset<T, FieldOfWorkArgs>): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T> | Null>;

    education<T extends EducationArgs= {}>(args?: Subset<T, EducationArgs>): Prisma__EducationClient<EducationGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Specialist base type for findUnique actions
   */
  export type SpecialistFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialist to fetch.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }

  /**
   * Specialist findUnique
   */
  export interface SpecialistFindUniqueArgs extends SpecialistFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specialist findUniqueOrThrow
   */
  export type SpecialistFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialist to fetch.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist base type for findFirst actions
   */
  export type SpecialistFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialist to fetch.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialists.
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialists.
     * 
    **/
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }

  /**
   * Specialist findFirst
   */
  export interface SpecialistFindFirstArgs extends SpecialistFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Specialist findFirstOrThrow
   */
  export type SpecialistFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialist to fetch.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialists.
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialists.
     * 
    **/
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }


  /**
   * Specialist findMany
   */
  export type SpecialistFindManyArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter, which Specialists to fetch.
     * 
    **/
    where?: SpecialistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialists to fetch.
     * 
    **/
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specialists.
     * 
    **/
    cursor?: SpecialistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }


  /**
   * Specialist create
   */
  export type SpecialistCreateArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * The data needed to create a Specialist.
     * 
    **/
    data: XOR<SpecialistCreateInput, SpecialistUncheckedCreateInput>
  }


  /**
   * Specialist update
   */
  export type SpecialistUpdateArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * The data needed to update a Specialist.
     * 
    **/
    data: XOR<SpecialistUpdateInput, SpecialistUncheckedUpdateInput>
    /**
     * Choose, which Specialist to update.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist updateMany
   */
  export type SpecialistUpdateManyArgs = {
    /**
     * The data used to update Specialists.
     * 
    **/
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyInput>
    /**
     * Filter which Specialists to update
     * 
    **/
    where?: SpecialistWhereInput
  }


  /**
   * Specialist upsert
   */
  export type SpecialistUpsertArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * The filter to search for the Specialist to update in case it exists.
     * 
    **/
    where: SpecialistWhereUniqueInput
    /**
     * In case the Specialist found by the `where` argument doesn't exist, create a new Specialist with this data.
     * 
    **/
    create: XOR<SpecialistCreateInput, SpecialistUncheckedCreateInput>
    /**
     * In case the Specialist was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SpecialistUpdateInput, SpecialistUncheckedUpdateInput>
  }


  /**
   * Specialist delete
   */
  export type SpecialistDeleteArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    /**
     * Filter which Specialist to delete.
     * 
    **/
    where: SpecialistWhereUniqueInput
  }


  /**
   * Specialist deleteMany
   */
  export type SpecialistDeleteManyArgs = {
    /**
     * Filter which Specialists to delete
     * 
    **/
    where?: SpecialistWhereInput
  }


  /**
   * Specialist.posts
   */
  export type Specialist$postsArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Specialist without action
   */
  export type SpecialistArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
  }



  /**
   * Model FieldOfWork
   */


  export type AggregateFieldOfWork = {
    _count: FieldOfWorkCountAggregateOutputType | null
    _avg: FieldOfWorkAvgAggregateOutputType | null
    _sum: FieldOfWorkSumAggregateOutputType | null
    _min: FieldOfWorkMinAggregateOutputType | null
    _max: FieldOfWorkMaxAggregateOutputType | null
  }

  export type FieldOfWorkAvgAggregateOutputType = {
    id: number | null
  }

  export type FieldOfWorkSumAggregateOutputType = {
    id: number | null
  }

  export type FieldOfWorkMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldOfWorkMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldOfWorkCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FieldOfWorkAvgAggregateInputType = {
    id?: true
  }

  export type FieldOfWorkSumAggregateInputType = {
    id?: true
  }

  export type FieldOfWorkMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldOfWorkMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldOfWorkCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FieldOfWorkAggregateArgs = {
    /**
     * Filter which FieldOfWork to aggregate.
     * 
    **/
    where?: FieldOfWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfWorks to fetch.
     * 
    **/
    orderBy?: Enumerable<FieldOfWorkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FieldOfWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfWorks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfWorks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FieldOfWorks
    **/
    _count?: true | FieldOfWorkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FieldOfWorkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FieldOfWorkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldOfWorkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldOfWorkMaxAggregateInputType
  }

  export type GetFieldOfWorkAggregateType<T extends FieldOfWorkAggregateArgs> = {
        [P in keyof T & keyof AggregateFieldOfWork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFieldOfWork[P]>
      : GetScalarType<T[P], AggregateFieldOfWork[P]>
  }




  export type FieldOfWorkGroupByArgs = {
    where?: FieldOfWorkWhereInput
    orderBy?: Enumerable<FieldOfWorkOrderByWithAggregationInput>
    by: Array<FieldOfWorkScalarFieldEnum>
    having?: FieldOfWorkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldOfWorkCountAggregateInputType | true
    _avg?: FieldOfWorkAvgAggregateInputType
    _sum?: FieldOfWorkSumAggregateInputType
    _min?: FieldOfWorkMinAggregateInputType
    _max?: FieldOfWorkMaxAggregateInputType
  }


  export type FieldOfWorkGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FieldOfWorkCountAggregateOutputType | null
    _avg: FieldOfWorkAvgAggregateOutputType | null
    _sum: FieldOfWorkSumAggregateOutputType | null
    _min: FieldOfWorkMinAggregateOutputType | null
    _max: FieldOfWorkMaxAggregateOutputType | null
  }

  type GetFieldOfWorkGroupByPayload<T extends FieldOfWorkGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FieldOfWorkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldOfWorkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldOfWorkGroupByOutputType[P]>
            : GetScalarType<T[P], FieldOfWorkGroupByOutputType[P]>
        }
      >
    >


  export type FieldOfWorkSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    specialists?: boolean | FieldOfWork$specialistsArgs
    _count?: boolean | FieldOfWorkCountOutputTypeArgs
  }


  export type FieldOfWorkInclude = {
    specialists?: boolean | FieldOfWork$specialistsArgs
    _count?: boolean | FieldOfWorkCountOutputTypeArgs
  } 

  export type FieldOfWorkGetPayload<S extends boolean | null | undefined | FieldOfWorkArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FieldOfWork :
    S extends undefined ? never :
    S extends { include: any } & (FieldOfWorkArgs | FieldOfWorkFindManyArgs)
    ? FieldOfWork  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'specialists' ? Array < SpecialistGetPayload<S['include'][P]>>  :
        P extends '_count' ? FieldOfWorkCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FieldOfWorkArgs | FieldOfWorkFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'specialists' ? Array < SpecialistGetPayload<S['select'][P]>>  :
        P extends '_count' ? FieldOfWorkCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FieldOfWork ? FieldOfWork[P] : never
  } 
      : FieldOfWork


  type FieldOfWorkCountArgs = Merge<
    Omit<FieldOfWorkFindManyArgs, 'select' | 'include'> & {
      select?: FieldOfWorkCountAggregateInputType | true
    }
  >

  export interface FieldOfWorkDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one FieldOfWork that matches the filter.
     * @param {FieldOfWorkFindUniqueArgs} args - Arguments to find a FieldOfWork
     * @example
     * // Get one FieldOfWork
     * const fieldOfWork = await prisma.fieldOfWork.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FieldOfWorkFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FieldOfWorkFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FieldOfWork'> extends True ? Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>> : Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T> | null, null>

    /**
     * Find one FieldOfWork that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FieldOfWorkFindUniqueOrThrowArgs} args - Arguments to find a FieldOfWork
     * @example
     * // Get one FieldOfWork
     * const fieldOfWork = await prisma.fieldOfWork.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FieldOfWorkFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FieldOfWorkFindUniqueOrThrowArgs>
    ): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>>

    /**
     * Find the first FieldOfWork that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkFindFirstArgs} args - Arguments to find a FieldOfWork
     * @example
     * // Get one FieldOfWork
     * const fieldOfWork = await prisma.fieldOfWork.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FieldOfWorkFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FieldOfWorkFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FieldOfWork'> extends True ? Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>> : Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T> | null, null>

    /**
     * Find the first FieldOfWork that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkFindFirstOrThrowArgs} args - Arguments to find a FieldOfWork
     * @example
     * // Get one FieldOfWork
     * const fieldOfWork = await prisma.fieldOfWork.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FieldOfWorkFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FieldOfWorkFindFirstOrThrowArgs>
    ): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>>

    /**
     * Find zero or more FieldOfWorks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FieldOfWorks
     * const fieldOfWorks = await prisma.fieldOfWork.findMany()
     * 
     * // Get first 10 FieldOfWorks
     * const fieldOfWorks = await prisma.fieldOfWork.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldOfWorkWithIdOnly = await prisma.fieldOfWork.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FieldOfWorkFindManyArgs>(
      args?: SelectSubset<T, FieldOfWorkFindManyArgs>
    ): PrismaPromise<Array<FieldOfWorkGetPayload<T>>>

    /**
     * Create a FieldOfWork.
     * @param {FieldOfWorkCreateArgs} args - Arguments to create a FieldOfWork.
     * @example
     * // Create one FieldOfWork
     * const FieldOfWork = await prisma.fieldOfWork.create({
     *   data: {
     *     // ... data to create a FieldOfWork
     *   }
     * })
     * 
    **/
    create<T extends FieldOfWorkCreateArgs>(
      args: SelectSubset<T, FieldOfWorkCreateArgs>
    ): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>>

    /**
     * Delete a FieldOfWork.
     * @param {FieldOfWorkDeleteArgs} args - Arguments to delete one FieldOfWork.
     * @example
     * // Delete one FieldOfWork
     * const FieldOfWork = await prisma.fieldOfWork.delete({
     *   where: {
     *     // ... filter to delete one FieldOfWork
     *   }
     * })
     * 
    **/
    delete<T extends FieldOfWorkDeleteArgs>(
      args: SelectSubset<T, FieldOfWorkDeleteArgs>
    ): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>>

    /**
     * Update one FieldOfWork.
     * @param {FieldOfWorkUpdateArgs} args - Arguments to update one FieldOfWork.
     * @example
     * // Update one FieldOfWork
     * const fieldOfWork = await prisma.fieldOfWork.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FieldOfWorkUpdateArgs>(
      args: SelectSubset<T, FieldOfWorkUpdateArgs>
    ): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>>

    /**
     * Delete zero or more FieldOfWorks.
     * @param {FieldOfWorkDeleteManyArgs} args - Arguments to filter FieldOfWorks to delete.
     * @example
     * // Delete a few FieldOfWorks
     * const { count } = await prisma.fieldOfWork.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FieldOfWorkDeleteManyArgs>(
      args?: SelectSubset<T, FieldOfWorkDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldOfWorks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FieldOfWorks
     * const fieldOfWork = await prisma.fieldOfWork.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FieldOfWorkUpdateManyArgs>(
      args: SelectSubset<T, FieldOfWorkUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FieldOfWork.
     * @param {FieldOfWorkUpsertArgs} args - Arguments to update or create a FieldOfWork.
     * @example
     * // Update or create a FieldOfWork
     * const fieldOfWork = await prisma.fieldOfWork.upsert({
     *   create: {
     *     // ... data to create a FieldOfWork
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FieldOfWork we want to update
     *   }
     * })
    **/
    upsert<T extends FieldOfWorkUpsertArgs>(
      args: SelectSubset<T, FieldOfWorkUpsertArgs>
    ): Prisma__FieldOfWorkClient<FieldOfWorkGetPayload<T>>

    /**
     * Count the number of FieldOfWorks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkCountArgs} args - Arguments to filter FieldOfWorks to count.
     * @example
     * // Count the number of FieldOfWorks
     * const count = await prisma.fieldOfWork.count({
     *   where: {
     *     // ... the filter for the FieldOfWorks we want to count
     *   }
     * })
    **/
    count<T extends FieldOfWorkCountArgs>(
      args?: Subset<T, FieldOfWorkCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldOfWorkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FieldOfWork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldOfWorkAggregateArgs>(args: Subset<T, FieldOfWorkAggregateArgs>): PrismaPromise<GetFieldOfWorkAggregateType<T>>

    /**
     * Group by FieldOfWork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfWorkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldOfWorkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldOfWorkGroupByArgs['orderBy'] }
        : { orderBy?: FieldOfWorkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldOfWorkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldOfWorkGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FieldOfWork.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FieldOfWorkClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialists<T extends FieldOfWork$specialistsArgs= {}>(args?: Subset<T, FieldOfWork$specialistsArgs>): PrismaPromise<Array<SpecialistGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FieldOfWork base type for findUnique actions
   */
  export type FieldOfWorkFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * Filter, which FieldOfWork to fetch.
     * 
    **/
    where: FieldOfWorkWhereUniqueInput
  }

  /**
   * FieldOfWork findUnique
   */
  export interface FieldOfWorkFindUniqueArgs extends FieldOfWorkFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FieldOfWork findUniqueOrThrow
   */
  export type FieldOfWorkFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * Filter, which FieldOfWork to fetch.
     * 
    **/
    where: FieldOfWorkWhereUniqueInput
  }


  /**
   * FieldOfWork base type for findFirst actions
   */
  export type FieldOfWorkFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * Filter, which FieldOfWork to fetch.
     * 
    **/
    where?: FieldOfWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfWorks to fetch.
     * 
    **/
    orderBy?: Enumerable<FieldOfWorkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldOfWorks.
     * 
    **/
    cursor?: FieldOfWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfWorks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfWorks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldOfWorks.
     * 
    **/
    distinct?: Enumerable<FieldOfWorkScalarFieldEnum>
  }

  /**
   * FieldOfWork findFirst
   */
  export interface FieldOfWorkFindFirstArgs extends FieldOfWorkFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FieldOfWork findFirstOrThrow
   */
  export type FieldOfWorkFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * Filter, which FieldOfWork to fetch.
     * 
    **/
    where?: FieldOfWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfWorks to fetch.
     * 
    **/
    orderBy?: Enumerable<FieldOfWorkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldOfWorks.
     * 
    **/
    cursor?: FieldOfWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfWorks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfWorks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldOfWorks.
     * 
    **/
    distinct?: Enumerable<FieldOfWorkScalarFieldEnum>
  }


  /**
   * FieldOfWork findMany
   */
  export type FieldOfWorkFindManyArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * Filter, which FieldOfWorks to fetch.
     * 
    **/
    where?: FieldOfWorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfWorks to fetch.
     * 
    **/
    orderBy?: Enumerable<FieldOfWorkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FieldOfWorks.
     * 
    **/
    cursor?: FieldOfWorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfWorks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfWorks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FieldOfWorkScalarFieldEnum>
  }


  /**
   * FieldOfWork create
   */
  export type FieldOfWorkCreateArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * The data needed to create a FieldOfWork.
     * 
    **/
    data: XOR<FieldOfWorkCreateInput, FieldOfWorkUncheckedCreateInput>
  }


  /**
   * FieldOfWork update
   */
  export type FieldOfWorkUpdateArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * The data needed to update a FieldOfWork.
     * 
    **/
    data: XOR<FieldOfWorkUpdateInput, FieldOfWorkUncheckedUpdateInput>
    /**
     * Choose, which FieldOfWork to update.
     * 
    **/
    where: FieldOfWorkWhereUniqueInput
  }


  /**
   * FieldOfWork updateMany
   */
  export type FieldOfWorkUpdateManyArgs = {
    /**
     * The data used to update FieldOfWorks.
     * 
    **/
    data: XOR<FieldOfWorkUpdateManyMutationInput, FieldOfWorkUncheckedUpdateManyInput>
    /**
     * Filter which FieldOfWorks to update
     * 
    **/
    where?: FieldOfWorkWhereInput
  }


  /**
   * FieldOfWork upsert
   */
  export type FieldOfWorkUpsertArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * The filter to search for the FieldOfWork to update in case it exists.
     * 
    **/
    where: FieldOfWorkWhereUniqueInput
    /**
     * In case the FieldOfWork found by the `where` argument doesn't exist, create a new FieldOfWork with this data.
     * 
    **/
    create: XOR<FieldOfWorkCreateInput, FieldOfWorkUncheckedCreateInput>
    /**
     * In case the FieldOfWork was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FieldOfWorkUpdateInput, FieldOfWorkUncheckedUpdateInput>
  }


  /**
   * FieldOfWork delete
   */
  export type FieldOfWorkDeleteArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
    /**
     * Filter which FieldOfWork to delete.
     * 
    **/
    where: FieldOfWorkWhereUniqueInput
  }


  /**
   * FieldOfWork deleteMany
   */
  export type FieldOfWorkDeleteManyArgs = {
    /**
     * Filter which FieldOfWorks to delete
     * 
    **/
    where?: FieldOfWorkWhereInput
  }


  /**
   * FieldOfWork.specialists
   */
  export type FieldOfWork$specialistsArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    where?: SpecialistWhereInput
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    cursor?: SpecialistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }


  /**
   * FieldOfWork without action
   */
  export type FieldOfWorkArgs = {
    /**
     * Select specific fields to fetch from the FieldOfWork
     * 
    **/
    select?: FieldOfWorkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FieldOfWorkInclude | null
  }



  /**
   * Model Education
   */


  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationAvgAggregateOutputType = {
    id: number | null
  }

  export type EducationSumAggregateOutputType = {
    id: number | null
  }

  export type EducationMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EducationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EducationAvgAggregateInputType = {
    id?: true
  }

  export type EducationSumAggregateInputType = {
    id?: true
  }

  export type EducationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EducationAggregateArgs = {
    /**
     * Filter which Education to aggregate.
     * 
    **/
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     * 
    **/
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs = {
    where?: EducationWhereInput
    orderBy?: Enumerable<EducationOrderByWithAggregationInput>
    by: Array<EducationScalarFieldEnum>
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _avg?: EducationAvgAggregateInputType
    _sum?: EducationSumAggregateInputType
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }


  export type EducationGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    specialists?: boolean | Education$specialistsArgs
    _count?: boolean | EducationCountOutputTypeArgs
  }


  export type EducationInclude = {
    specialists?: boolean | Education$specialistsArgs
    _count?: boolean | EducationCountOutputTypeArgs
  } 

  export type EducationGetPayload<S extends boolean | null | undefined | EducationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Education :
    S extends undefined ? never :
    S extends { include: any } & (EducationArgs | EducationFindManyArgs)
    ? Education  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'specialists' ? Array < SpecialistGetPayload<S['include'][P]>>  :
        P extends '_count' ? EducationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EducationArgs | EducationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'specialists' ? Array < SpecialistGetPayload<S['select'][P]>>  :
        P extends '_count' ? EducationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Education ? Education[P] : never
  } 
      : Education


  type EducationCountArgs = Merge<
    Omit<EducationFindManyArgs, 'select' | 'include'> & {
      select?: EducationCountAggregateInputType | true
    }
  >

  export interface EducationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EducationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EducationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Education'> extends True ? Prisma__EducationClient<EducationGetPayload<T>> : Prisma__EducationClient<EducationGetPayload<T> | null, null>

    /**
     * Find one Education that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EducationFindUniqueOrThrowArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EducationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EducationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Education'> extends True ? Prisma__EducationClient<EducationGetPayload<T>> : Prisma__EducationClient<EducationGetPayload<T> | null, null>

    /**
     * Find the first Education that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EducationFindFirstOrThrowArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EducationFindManyArgs>(
      args?: SelectSubset<T, EducationFindManyArgs>
    ): PrismaPromise<Array<EducationGetPayload<T>>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
    **/
    create<T extends EducationCreateArgs>(
      args: SelectSubset<T, EducationCreateArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
    **/
    delete<T extends EducationDeleteArgs>(
      args: SelectSubset<T, EducationDeleteArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EducationUpdateArgs>(
      args: SelectSubset<T, EducationUpdateArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EducationDeleteManyArgs>(
      args?: SelectSubset<T, EducationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EducationUpdateManyArgs>(
      args: SelectSubset<T, EducationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
    **/
    upsert<T extends EducationUpsertArgs>(
      args: SelectSubset<T, EducationUpsertArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EducationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialists<T extends Education$specialistsArgs= {}>(args?: Subset<T, Education$specialistsArgs>): PrismaPromise<Array<SpecialistGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Education base type for findUnique actions
   */
  export type EducationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     * 
    **/
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUnique
   */
  export interface EducationFindUniqueArgs extends EducationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     * 
    **/
    where: EducationWhereUniqueInput
  }


  /**
   * Education base type for findFirst actions
   */
  export type EducationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     * 
    **/
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     * 
    **/
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     * 
    **/
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     * 
    **/
    distinct?: Enumerable<EducationScalarFieldEnum>
  }

  /**
   * Education findFirst
   */
  export interface EducationFindFirstArgs extends EducationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     * 
    **/
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     * 
    **/
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     * 
    **/
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     * 
    **/
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * Education findMany
   */
  export type EducationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * Filter, which Educations to fetch.
     * 
    **/
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     * 
    **/
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     * 
    **/
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * Education create
   */
  export type EducationCreateArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * The data needed to create a Education.
     * 
    **/
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }


  /**
   * Education update
   */
  export type EducationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * The data needed to update a Education.
     * 
    **/
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     * 
    **/
    where: EducationWhereUniqueInput
  }


  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs = {
    /**
     * The data used to update Educations.
     * 
    **/
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     * 
    **/
    where?: EducationWhereInput
  }


  /**
   * Education upsert
   */
  export type EducationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * The filter to search for the Education to update in case it exists.
     * 
    **/
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     * 
    **/
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }


  /**
   * Education delete
   */
  export type EducationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
    /**
     * Filter which Education to delete.
     * 
    **/
    where: EducationWhereUniqueInput
  }


  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs = {
    /**
     * Filter which Educations to delete
     * 
    **/
    where?: EducationWhereInput
  }


  /**
   * Education.specialists
   */
  export type Education$specialistsArgs = {
    /**
     * Select specific fields to fetch from the Specialist
     * 
    **/
    select?: SpecialistSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SpecialistInclude | null
    where?: SpecialistWhereInput
    orderBy?: Enumerable<SpecialistOrderByWithRelationInput>
    cursor?: SpecialistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SpecialistScalarFieldEnum>
  }


  /**
   * Education without action
   */
  export type EducationArgs = {
    /**
     * Select specific fields to fetch from the Education
     * 
    **/
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EducationInclude | null
  }



  /**
   * Model Substance
   */


  export type AggregateSubstance = {
    _count: SubstanceCountAggregateOutputType | null
    _avg: SubstanceAvgAggregateOutputType | null
    _sum: SubstanceSumAggregateOutputType | null
    _min: SubstanceMinAggregateOutputType | null
    _max: SubstanceMaxAggregateOutputType | null
  }

  export type SubstanceAvgAggregateOutputType = {
    id: number | null
  }

  export type SubstanceSumAggregateOutputType = {
    id: number | null
  }

  export type SubstanceMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubstanceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubstanceCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubstanceAvgAggregateInputType = {
    id?: true
  }

  export type SubstanceSumAggregateInputType = {
    id?: true
  }

  export type SubstanceMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubstanceMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubstanceCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubstanceAggregateArgs = {
    /**
     * Filter which Substance to aggregate.
     * 
    **/
    where?: SubstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substances to fetch.
     * 
    **/
    orderBy?: Enumerable<SubstanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SubstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Substances
    **/
    _count?: true | SubstanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubstanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubstanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubstanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubstanceMaxAggregateInputType
  }

  export type GetSubstanceAggregateType<T extends SubstanceAggregateArgs> = {
        [P in keyof T & keyof AggregateSubstance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubstance[P]>
      : GetScalarType<T[P], AggregateSubstance[P]>
  }




  export type SubstanceGroupByArgs = {
    where?: SubstanceWhereInput
    orderBy?: Enumerable<SubstanceOrderByWithAggregationInput>
    by: Array<SubstanceScalarFieldEnum>
    having?: SubstanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubstanceCountAggregateInputType | true
    _avg?: SubstanceAvgAggregateInputType
    _sum?: SubstanceSumAggregateInputType
    _min?: SubstanceMinAggregateInputType
    _max?: SubstanceMaxAggregateInputType
  }


  export type SubstanceGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: SubstanceCountAggregateOutputType | null
    _avg: SubstanceAvgAggregateOutputType | null
    _sum: SubstanceSumAggregateOutputType | null
    _min: SubstanceMinAggregateOutputType | null
    _max: SubstanceMaxAggregateOutputType | null
  }

  type GetSubstanceGroupByPayload<T extends SubstanceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SubstanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubstanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubstanceGroupByOutputType[P]>
            : GetScalarType<T[P], SubstanceGroupByOutputType[P]>
        }
      >
    >


  export type SubstanceSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstSubstance?: boolean | Substance$firstSubstanceArgs
    secondSubstance?: boolean | Substance$secondSubstanceArgs
    _count?: boolean | SubstanceCountOutputTypeArgs
  }


  export type SubstanceInclude = {
    firstSubstance?: boolean | Substance$firstSubstanceArgs
    secondSubstance?: boolean | Substance$secondSubstanceArgs
    _count?: boolean | SubstanceCountOutputTypeArgs
  } 

  export type SubstanceGetPayload<S extends boolean | null | undefined | SubstanceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Substance :
    S extends undefined ? never :
    S extends { include: any } & (SubstanceArgs | SubstanceFindManyArgs)
    ? Substance  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'firstSubstance' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'secondSubstance' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends '_count' ? SubstanceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SubstanceArgs | SubstanceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'firstSubstance' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'secondSubstance' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends '_count' ? SubstanceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Substance ? Substance[P] : never
  } 
      : Substance


  type SubstanceCountArgs = Merge<
    Omit<SubstanceFindManyArgs, 'select' | 'include'> & {
      select?: SubstanceCountAggregateInputType | true
    }
  >

  export interface SubstanceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Substance that matches the filter.
     * @param {SubstanceFindUniqueArgs} args - Arguments to find a Substance
     * @example
     * // Get one Substance
     * const substance = await prisma.substance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubstanceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SubstanceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Substance'> extends True ? Prisma__SubstanceClient<SubstanceGetPayload<T>> : Prisma__SubstanceClient<SubstanceGetPayload<T> | null, null>

    /**
     * Find one Substance that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubstanceFindUniqueOrThrowArgs} args - Arguments to find a Substance
     * @example
     * // Get one Substance
     * const substance = await prisma.substance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubstanceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SubstanceFindUniqueOrThrowArgs>
    ): Prisma__SubstanceClient<SubstanceGetPayload<T>>

    /**
     * Find the first Substance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceFindFirstArgs} args - Arguments to find a Substance
     * @example
     * // Get one Substance
     * const substance = await prisma.substance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubstanceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SubstanceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Substance'> extends True ? Prisma__SubstanceClient<SubstanceGetPayload<T>> : Prisma__SubstanceClient<SubstanceGetPayload<T> | null, null>

    /**
     * Find the first Substance that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceFindFirstOrThrowArgs} args - Arguments to find a Substance
     * @example
     * // Get one Substance
     * const substance = await prisma.substance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubstanceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SubstanceFindFirstOrThrowArgs>
    ): Prisma__SubstanceClient<SubstanceGetPayload<T>>

    /**
     * Find zero or more Substances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Substances
     * const substances = await prisma.substance.findMany()
     * 
     * // Get first 10 Substances
     * const substances = await prisma.substance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const substanceWithIdOnly = await prisma.substance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubstanceFindManyArgs>(
      args?: SelectSubset<T, SubstanceFindManyArgs>
    ): PrismaPromise<Array<SubstanceGetPayload<T>>>

    /**
     * Create a Substance.
     * @param {SubstanceCreateArgs} args - Arguments to create a Substance.
     * @example
     * // Create one Substance
     * const Substance = await prisma.substance.create({
     *   data: {
     *     // ... data to create a Substance
     *   }
     * })
     * 
    **/
    create<T extends SubstanceCreateArgs>(
      args: SelectSubset<T, SubstanceCreateArgs>
    ): Prisma__SubstanceClient<SubstanceGetPayload<T>>

    /**
     * Delete a Substance.
     * @param {SubstanceDeleteArgs} args - Arguments to delete one Substance.
     * @example
     * // Delete one Substance
     * const Substance = await prisma.substance.delete({
     *   where: {
     *     // ... filter to delete one Substance
     *   }
     * })
     * 
    **/
    delete<T extends SubstanceDeleteArgs>(
      args: SelectSubset<T, SubstanceDeleteArgs>
    ): Prisma__SubstanceClient<SubstanceGetPayload<T>>

    /**
     * Update one Substance.
     * @param {SubstanceUpdateArgs} args - Arguments to update one Substance.
     * @example
     * // Update one Substance
     * const substance = await prisma.substance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubstanceUpdateArgs>(
      args: SelectSubset<T, SubstanceUpdateArgs>
    ): Prisma__SubstanceClient<SubstanceGetPayload<T>>

    /**
     * Delete zero or more Substances.
     * @param {SubstanceDeleteManyArgs} args - Arguments to filter Substances to delete.
     * @example
     * // Delete a few Substances
     * const { count } = await prisma.substance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubstanceDeleteManyArgs>(
      args?: SelectSubset<T, SubstanceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Substances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Substances
     * const substance = await prisma.substance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubstanceUpdateManyArgs>(
      args: SelectSubset<T, SubstanceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Substance.
     * @param {SubstanceUpsertArgs} args - Arguments to update or create a Substance.
     * @example
     * // Update or create a Substance
     * const substance = await prisma.substance.upsert({
     *   create: {
     *     // ... data to create a Substance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Substance we want to update
     *   }
     * })
    **/
    upsert<T extends SubstanceUpsertArgs>(
      args: SelectSubset<T, SubstanceUpsertArgs>
    ): Prisma__SubstanceClient<SubstanceGetPayload<T>>

    /**
     * Count the number of Substances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceCountArgs} args - Arguments to filter Substances to count.
     * @example
     * // Count the number of Substances
     * const count = await prisma.substance.count({
     *   where: {
     *     // ... the filter for the Substances we want to count
     *   }
     * })
    **/
    count<T extends SubstanceCountArgs>(
      args?: Subset<T, SubstanceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubstanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Substance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubstanceAggregateArgs>(args: Subset<T, SubstanceAggregateArgs>): PrismaPromise<GetSubstanceAggregateType<T>>

    /**
     * Group by Substance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubstanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubstanceGroupByArgs['orderBy'] }
        : { orderBy?: SubstanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubstanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubstanceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Substance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubstanceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    firstSubstance<T extends Substance$firstSubstanceArgs= {}>(args?: Subset<T, Substance$firstSubstanceArgs>): PrismaPromise<Array<PostGetPayload<T>>| Null>;

    secondSubstance<T extends Substance$secondSubstanceArgs= {}>(args?: Subset<T, Substance$secondSubstanceArgs>): PrismaPromise<Array<PostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Substance base type for findUnique actions
   */
  export type SubstanceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * Filter, which Substance to fetch.
     * 
    **/
    where: SubstanceWhereUniqueInput
  }

  /**
   * Substance findUnique
   */
  export interface SubstanceFindUniqueArgs extends SubstanceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Substance findUniqueOrThrow
   */
  export type SubstanceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * Filter, which Substance to fetch.
     * 
    **/
    where: SubstanceWhereUniqueInput
  }


  /**
   * Substance base type for findFirst actions
   */
  export type SubstanceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * Filter, which Substance to fetch.
     * 
    **/
    where?: SubstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substances to fetch.
     * 
    **/
    orderBy?: Enumerable<SubstanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Substances.
     * 
    **/
    cursor?: SubstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Substances.
     * 
    **/
    distinct?: Enumerable<SubstanceScalarFieldEnum>
  }

  /**
   * Substance findFirst
   */
  export interface SubstanceFindFirstArgs extends SubstanceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Substance findFirstOrThrow
   */
  export type SubstanceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * Filter, which Substance to fetch.
     * 
    **/
    where?: SubstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substances to fetch.
     * 
    **/
    orderBy?: Enumerable<SubstanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Substances.
     * 
    **/
    cursor?: SubstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substances.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Substances.
     * 
    **/
    distinct?: Enumerable<SubstanceScalarFieldEnum>
  }


  /**
   * Substance findMany
   */
  export type SubstanceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * Filter, which Substances to fetch.
     * 
    **/
    where?: SubstanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substances to fetch.
     * 
    **/
    orderBy?: Enumerable<SubstanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Substances.
     * 
    **/
    cursor?: SubstanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substances from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substances.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SubstanceScalarFieldEnum>
  }


  /**
   * Substance create
   */
  export type SubstanceCreateArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * The data needed to create a Substance.
     * 
    **/
    data: XOR<SubstanceCreateInput, SubstanceUncheckedCreateInput>
  }


  /**
   * Substance update
   */
  export type SubstanceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * The data needed to update a Substance.
     * 
    **/
    data: XOR<SubstanceUpdateInput, SubstanceUncheckedUpdateInput>
    /**
     * Choose, which Substance to update.
     * 
    **/
    where: SubstanceWhereUniqueInput
  }


  /**
   * Substance updateMany
   */
  export type SubstanceUpdateManyArgs = {
    /**
     * The data used to update Substances.
     * 
    **/
    data: XOR<SubstanceUpdateManyMutationInput, SubstanceUncheckedUpdateManyInput>
    /**
     * Filter which Substances to update
     * 
    **/
    where?: SubstanceWhereInput
  }


  /**
   * Substance upsert
   */
  export type SubstanceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * The filter to search for the Substance to update in case it exists.
     * 
    **/
    where: SubstanceWhereUniqueInput
    /**
     * In case the Substance found by the `where` argument doesn't exist, create a new Substance with this data.
     * 
    **/
    create: XOR<SubstanceCreateInput, SubstanceUncheckedCreateInput>
    /**
     * In case the Substance was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SubstanceUpdateInput, SubstanceUncheckedUpdateInput>
  }


  /**
   * Substance delete
   */
  export type SubstanceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
    /**
     * Filter which Substance to delete.
     * 
    **/
    where: SubstanceWhereUniqueInput
  }


  /**
   * Substance deleteMany
   */
  export type SubstanceDeleteManyArgs = {
    /**
     * Filter which Substances to delete
     * 
    **/
    where?: SubstanceWhereInput
  }


  /**
   * Substance.firstSubstance
   */
  export type Substance$firstSubstanceArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Substance.secondSubstance
   */
  export type Substance$secondSubstanceArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Substance without action
   */
  export type SubstanceArgs = {
    /**
     * Select specific fields to fetch from the Substance
     * 
    **/
    select?: SubstanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubstanceInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    firstSubstanceId: number | null
    secondSubstanceId: number | null
    recommendedId: number | null
    specialistId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    firstSubstanceId: number | null
    secondSubstanceId: number | null
    recommendedId: number | null
    specialistId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    firstSubstanceId: number | null
    secondSubstanceId: number | null
    recommendedId: number | null
    description: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    specialistId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    firstSubstanceId: number | null
    secondSubstanceId: number | null
    recommendedId: number | null
    description: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    specialistId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    firstSubstanceId: number
    secondSubstanceId: number
    recommendedId: number
    description: number
    content: number
    createdAt: number
    updatedAt: number
    specialistId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    firstSubstanceId?: true
    secondSubstanceId?: true
    recommendedId?: true
    specialistId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    firstSubstanceId?: true
    secondSubstanceId?: true
    recommendedId?: true
    specialistId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    firstSubstanceId?: true
    secondSubstanceId?: true
    recommendedId?: true
    description?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    specialistId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    firstSubstanceId?: true
    secondSubstanceId?: true
    recommendedId?: true
    description?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    specialistId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    firstSubstanceId?: true
    secondSubstanceId?: true
    recommendedId?: true
    description?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    specialistId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: Array<PostScalarFieldEnum>
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    firstSubstanceId: number
    secondSubstanceId: number
    recommendedId: number
    description: string
    content: string
    createdAt: Date
    updatedAt: Date
    specialistId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    firstSubstanceId?: boolean
    secondSubstanceId?: boolean
    recommendedId?: boolean
    description?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    specialistId?: boolean
    specialist?: boolean | SpecialistArgs
    firstSubstance?: boolean | SubstanceArgs
    secondSubstance?: boolean | SubstanceArgs
    recommended?: boolean | RecommendedArgs
  }


  export type PostInclude = {
    specialist?: boolean | SpecialistArgs
    firstSubstance?: boolean | SubstanceArgs
    secondSubstance?: boolean | SubstanceArgs
    recommended?: boolean | RecommendedArgs
  } 

  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'specialist' ? SpecialistGetPayload<S['include'][P]> :
        P extends 'firstSubstance' ? SubstanceGetPayload<S['include'][P]> :
        P extends 'secondSubstance' ? SubstanceGetPayload<S['include'][P]> :
        P extends 'recommended' ? RecommendedGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'specialist' ? SpecialistGetPayload<S['select'][P]> :
        P extends 'firstSubstance' ? SubstanceGetPayload<S['select'][P]> :
        P extends 'secondSubstance' ? SubstanceGetPayload<S['select'][P]> :
        P extends 'recommended' ? RecommendedGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = Merge<
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    specialist<T extends SpecialistArgs= {}>(args?: Subset<T, SpecialistArgs>): Prisma__SpecialistClient<SpecialistGetPayload<T> | Null>;

    firstSubstance<T extends SubstanceArgs= {}>(args?: Subset<T, SubstanceArgs>): Prisma__SubstanceClient<SubstanceGetPayload<T> | Null>;

    secondSubstance<T extends SubstanceArgs= {}>(args?: Subset<T, SubstanceArgs>): Prisma__SubstanceClient<SubstanceGetPayload<T> | Null>;

    recommended<T extends RecommendedArgs= {}>(args?: Subset<T, RecommendedArgs>): Prisma__RecommendedClient<RecommendedGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }

  /**
   * Post findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     * 
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     * 
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     * 
    **/
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     * 
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     * 
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
  }



  /**
   * Model Recommended
   */


  export type AggregateRecommended = {
    _count: RecommendedCountAggregateOutputType | null
    _avg: RecommendedAvgAggregateOutputType | null
    _sum: RecommendedSumAggregateOutputType | null
    _min: RecommendedMinAggregateOutputType | null
    _max: RecommendedMaxAggregateOutputType | null
  }

  export type RecommendedAvgAggregateOutputType = {
    id: number | null
  }

  export type RecommendedSumAggregateOutputType = {
    id: number | null
  }

  export type RecommendedMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecommendedMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecommendedCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecommendedAvgAggregateInputType = {
    id?: true
  }

  export type RecommendedSumAggregateInputType = {
    id?: true
  }

  export type RecommendedMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecommendedMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecommendedCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecommendedAggregateArgs = {
    /**
     * Filter which Recommended to aggregate.
     * 
    **/
    where?: RecommendedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendeds to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RecommendedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendeds
    **/
    _count?: true | RecommendedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendedMaxAggregateInputType
  }

  export type GetRecommendedAggregateType<T extends RecommendedAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommended]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommended[P]>
      : GetScalarType<T[P], AggregateRecommended[P]>
  }




  export type RecommendedGroupByArgs = {
    where?: RecommendedWhereInput
    orderBy?: Enumerable<RecommendedOrderByWithAggregationInput>
    by: Array<RecommendedScalarFieldEnum>
    having?: RecommendedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendedCountAggregateInputType | true
    _avg?: RecommendedAvgAggregateInputType
    _sum?: RecommendedSumAggregateInputType
    _min?: RecommendedMinAggregateInputType
    _max?: RecommendedMaxAggregateInputType
  }


  export type RecommendedGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: RecommendedCountAggregateOutputType | null
    _avg: RecommendedAvgAggregateOutputType | null
    _sum: RecommendedSumAggregateOutputType | null
    _min: RecommendedMinAggregateOutputType | null
    _max: RecommendedMaxAggregateOutputType | null
  }

  type GetRecommendedGroupByPayload<T extends RecommendedGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RecommendedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendedGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendedGroupByOutputType[P]>
        }
      >
    >


  export type RecommendedSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | Recommended$postsArgs
    _count?: boolean | RecommendedCountOutputTypeArgs
  }


  export type RecommendedInclude = {
    posts?: boolean | Recommended$postsArgs
    _count?: boolean | RecommendedCountOutputTypeArgs
  } 

  export type RecommendedGetPayload<S extends boolean | null | undefined | RecommendedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Recommended :
    S extends undefined ? never :
    S extends { include: any } & (RecommendedArgs | RecommendedFindManyArgs)
    ? Recommended  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends '_count' ? RecommendedCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RecommendedArgs | RecommendedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends '_count' ? RecommendedCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Recommended ? Recommended[P] : never
  } 
      : Recommended


  type RecommendedCountArgs = Merge<
    Omit<RecommendedFindManyArgs, 'select' | 'include'> & {
      select?: RecommendedCountAggregateInputType | true
    }
  >

  export interface RecommendedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Recommended that matches the filter.
     * @param {RecommendedFindUniqueArgs} args - Arguments to find a Recommended
     * @example
     * // Get one Recommended
     * const recommended = await prisma.recommended.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecommendedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecommendedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recommended'> extends True ? Prisma__RecommendedClient<RecommendedGetPayload<T>> : Prisma__RecommendedClient<RecommendedGetPayload<T> | null, null>

    /**
     * Find one Recommended that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecommendedFindUniqueOrThrowArgs} args - Arguments to find a Recommended
     * @example
     * // Get one Recommended
     * const recommended = await prisma.recommended.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecommendedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RecommendedFindUniqueOrThrowArgs>
    ): Prisma__RecommendedClient<RecommendedGetPayload<T>>

    /**
     * Find the first Recommended that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedFindFirstArgs} args - Arguments to find a Recommended
     * @example
     * // Get one Recommended
     * const recommended = await prisma.recommended.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecommendedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecommendedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recommended'> extends True ? Prisma__RecommendedClient<RecommendedGetPayload<T>> : Prisma__RecommendedClient<RecommendedGetPayload<T> | null, null>

    /**
     * Find the first Recommended that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedFindFirstOrThrowArgs} args - Arguments to find a Recommended
     * @example
     * // Get one Recommended
     * const recommended = await prisma.recommended.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecommendedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RecommendedFindFirstOrThrowArgs>
    ): Prisma__RecommendedClient<RecommendedGetPayload<T>>

    /**
     * Find zero or more Recommendeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendeds
     * const recommendeds = await prisma.recommended.findMany()
     * 
     * // Get first 10 Recommendeds
     * const recommendeds = await prisma.recommended.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendedWithIdOnly = await prisma.recommended.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecommendedFindManyArgs>(
      args?: SelectSubset<T, RecommendedFindManyArgs>
    ): PrismaPromise<Array<RecommendedGetPayload<T>>>

    /**
     * Create a Recommended.
     * @param {RecommendedCreateArgs} args - Arguments to create a Recommended.
     * @example
     * // Create one Recommended
     * const Recommended = await prisma.recommended.create({
     *   data: {
     *     // ... data to create a Recommended
     *   }
     * })
     * 
    **/
    create<T extends RecommendedCreateArgs>(
      args: SelectSubset<T, RecommendedCreateArgs>
    ): Prisma__RecommendedClient<RecommendedGetPayload<T>>

    /**
     * Delete a Recommended.
     * @param {RecommendedDeleteArgs} args - Arguments to delete one Recommended.
     * @example
     * // Delete one Recommended
     * const Recommended = await prisma.recommended.delete({
     *   where: {
     *     // ... filter to delete one Recommended
     *   }
     * })
     * 
    **/
    delete<T extends RecommendedDeleteArgs>(
      args: SelectSubset<T, RecommendedDeleteArgs>
    ): Prisma__RecommendedClient<RecommendedGetPayload<T>>

    /**
     * Update one Recommended.
     * @param {RecommendedUpdateArgs} args - Arguments to update one Recommended.
     * @example
     * // Update one Recommended
     * const recommended = await prisma.recommended.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecommendedUpdateArgs>(
      args: SelectSubset<T, RecommendedUpdateArgs>
    ): Prisma__RecommendedClient<RecommendedGetPayload<T>>

    /**
     * Delete zero or more Recommendeds.
     * @param {RecommendedDeleteManyArgs} args - Arguments to filter Recommendeds to delete.
     * @example
     * // Delete a few Recommendeds
     * const { count } = await prisma.recommended.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecommendedDeleteManyArgs>(
      args?: SelectSubset<T, RecommendedDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendeds
     * const recommended = await prisma.recommended.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecommendedUpdateManyArgs>(
      args: SelectSubset<T, RecommendedUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommended.
     * @param {RecommendedUpsertArgs} args - Arguments to update or create a Recommended.
     * @example
     * // Update or create a Recommended
     * const recommended = await prisma.recommended.upsert({
     *   create: {
     *     // ... data to create a Recommended
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommended we want to update
     *   }
     * })
    **/
    upsert<T extends RecommendedUpsertArgs>(
      args: SelectSubset<T, RecommendedUpsertArgs>
    ): Prisma__RecommendedClient<RecommendedGetPayload<T>>

    /**
     * Count the number of Recommendeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedCountArgs} args - Arguments to filter Recommendeds to count.
     * @example
     * // Count the number of Recommendeds
     * const count = await prisma.recommended.count({
     *   where: {
     *     // ... the filter for the Recommendeds we want to count
     *   }
     * })
    **/
    count<T extends RecommendedCountArgs>(
      args?: Subset<T, RecommendedCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommended.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendedAggregateArgs>(args: Subset<T, RecommendedAggregateArgs>): PrismaPromise<GetRecommendedAggregateType<T>>

    /**
     * Group by Recommended.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendedGroupByArgs['orderBy'] }
        : { orderBy?: RecommendedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendedGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommended.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecommendedClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    posts<T extends Recommended$postsArgs= {}>(args?: Subset<T, Recommended$postsArgs>): PrismaPromise<Array<PostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recommended base type for findUnique actions
   */
  export type RecommendedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * Filter, which Recommended to fetch.
     * 
    **/
    where: RecommendedWhereUniqueInput
  }

  /**
   * Recommended findUnique
   */
  export interface RecommendedFindUniqueArgs extends RecommendedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recommended findUniqueOrThrow
   */
  export type RecommendedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * Filter, which Recommended to fetch.
     * 
    **/
    where: RecommendedWhereUniqueInput
  }


  /**
   * Recommended base type for findFirst actions
   */
  export type RecommendedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * Filter, which Recommended to fetch.
     * 
    **/
    where?: RecommendedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendeds to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendeds.
     * 
    **/
    cursor?: RecommendedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendeds.
     * 
    **/
    distinct?: Enumerable<RecommendedScalarFieldEnum>
  }

  /**
   * Recommended findFirst
   */
  export interface RecommendedFindFirstArgs extends RecommendedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recommended findFirstOrThrow
   */
  export type RecommendedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * Filter, which Recommended to fetch.
     * 
    **/
    where?: RecommendedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendeds to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendeds.
     * 
    **/
    cursor?: RecommendedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendeds.
     * 
    **/
    distinct?: Enumerable<RecommendedScalarFieldEnum>
  }


  /**
   * Recommended findMany
   */
  export type RecommendedFindManyArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * Filter, which Recommendeds to fetch.
     * 
    **/
    where?: RecommendedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendeds to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendeds.
     * 
    **/
    cursor?: RecommendedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendeds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RecommendedScalarFieldEnum>
  }


  /**
   * Recommended create
   */
  export type RecommendedCreateArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * The data needed to create a Recommended.
     * 
    **/
    data: XOR<RecommendedCreateInput, RecommendedUncheckedCreateInput>
  }


  /**
   * Recommended update
   */
  export type RecommendedUpdateArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * The data needed to update a Recommended.
     * 
    **/
    data: XOR<RecommendedUpdateInput, RecommendedUncheckedUpdateInput>
    /**
     * Choose, which Recommended to update.
     * 
    **/
    where: RecommendedWhereUniqueInput
  }


  /**
   * Recommended updateMany
   */
  export type RecommendedUpdateManyArgs = {
    /**
     * The data used to update Recommendeds.
     * 
    **/
    data: XOR<RecommendedUpdateManyMutationInput, RecommendedUncheckedUpdateManyInput>
    /**
     * Filter which Recommendeds to update
     * 
    **/
    where?: RecommendedWhereInput
  }


  /**
   * Recommended upsert
   */
  export type RecommendedUpsertArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * The filter to search for the Recommended to update in case it exists.
     * 
    **/
    where: RecommendedWhereUniqueInput
    /**
     * In case the Recommended found by the `where` argument doesn't exist, create a new Recommended with this data.
     * 
    **/
    create: XOR<RecommendedCreateInput, RecommendedUncheckedCreateInput>
    /**
     * In case the Recommended was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RecommendedUpdateInput, RecommendedUncheckedUpdateInput>
  }


  /**
   * Recommended delete
   */
  export type RecommendedDeleteArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
    /**
     * Filter which Recommended to delete.
     * 
    **/
    where: RecommendedWhereUniqueInput
  }


  /**
   * Recommended deleteMany
   */
  export type RecommendedDeleteManyArgs = {
    /**
     * Filter which Recommendeds to delete
     * 
    **/
    where?: RecommendedWhereInput
  }


  /**
   * Recommended.posts
   */
  export type Recommended$postsArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Recommended without action
   */
  export type RecommendedArgs = {
    /**
     * Select specific fields to fetch from the Recommended
     * 
    **/
    select?: RecommendedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendedInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EducationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const FieldOfWorkScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FieldOfWorkScalarFieldEnum = (typeof FieldOfWorkScalarFieldEnum)[keyof typeof FieldOfWorkScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    firstSubstanceId: 'firstSubstanceId',
    secondSubstanceId: 'secondSubstanceId',
    recommendedId: 'recommendedId',
    description: 'description',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    specialistId: 'specialistId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const RecommendedScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecommendedScalarFieldEnum = (typeof RecommendedScalarFieldEnum)[keyof typeof RecommendedScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SpecialistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    cpf: 'cpf',
    mobile: 'mobile',
    fieldOfWorkId: 'fieldOfWorkId',
    educationId: 'educationId',
    profession: 'profession',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SpecialistScalarFieldEnum = (typeof SpecialistScalarFieldEnum)[keyof typeof SpecialistScalarFieldEnum]


  export const SubstanceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubstanceScalarFieldEnum = (typeof SubstanceScalarFieldEnum)[keyof typeof SubstanceScalarFieldEnum]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type SpecialistWhereInput = {
    AND?: Enumerable<SpecialistWhereInput>
    OR?: Enumerable<SpecialistWhereInput>
    NOT?: Enumerable<SpecialistWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    cpf?: StringFilter | string
    mobile?: StringFilter | string
    fieldOfWorkId?: IntFilter | number
    educationId?: IntFilter | number
    profession?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: PostListRelationFilter
    fieldOfWork?: XOR<FieldOfWorkRelationFilter, FieldOfWorkWhereInput>
    education?: XOR<EducationRelationFilter, EducationWhereInput>
  }

  export type SpecialistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    mobile?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
    profession?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: PostOrderByRelationAggregateInput
    fieldOfWork?: FieldOfWorkOrderByWithRelationInput
    education?: EducationOrderByWithRelationInput
  }

  export type SpecialistWhereUniqueInput = {
    id?: number
  }

  export type SpecialistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    mobile?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
    profession?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SpecialistCountOrderByAggregateInput
    _avg?: SpecialistAvgOrderByAggregateInput
    _max?: SpecialistMaxOrderByAggregateInput
    _min?: SpecialistMinOrderByAggregateInput
    _sum?: SpecialistSumOrderByAggregateInput
  }

  export type SpecialistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SpecialistScalarWhereWithAggregatesInput>
    OR?: Enumerable<SpecialistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SpecialistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    cpf?: StringWithAggregatesFilter | string
    mobile?: StringWithAggregatesFilter | string
    fieldOfWorkId?: IntWithAggregatesFilter | number
    educationId?: IntWithAggregatesFilter | number
    profession?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FieldOfWorkWhereInput = {
    AND?: Enumerable<FieldOfWorkWhereInput>
    OR?: Enumerable<FieldOfWorkWhereInput>
    NOT?: Enumerable<FieldOfWorkWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    specialists?: SpecialistListRelationFilter
  }

  export type FieldOfWorkOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialists?: SpecialistOrderByRelationAggregateInput
  }

  export type FieldOfWorkWhereUniqueInput = {
    id?: number
  }

  export type FieldOfWorkOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FieldOfWorkCountOrderByAggregateInput
    _avg?: FieldOfWorkAvgOrderByAggregateInput
    _max?: FieldOfWorkMaxOrderByAggregateInput
    _min?: FieldOfWorkMinOrderByAggregateInput
    _sum?: FieldOfWorkSumOrderByAggregateInput
  }

  export type FieldOfWorkScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FieldOfWorkScalarWhereWithAggregatesInput>
    OR?: Enumerable<FieldOfWorkScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FieldOfWorkScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EducationWhereInput = {
    AND?: Enumerable<EducationWhereInput>
    OR?: Enumerable<EducationWhereInput>
    NOT?: Enumerable<EducationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    specialists?: SpecialistListRelationFilter
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialists?: SpecialistOrderByRelationAggregateInput
  }

  export type EducationWhereUniqueInput = {
    id?: number
  }

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _avg?: EducationAvgOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
    _sum?: EducationSumOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EducationScalarWhereWithAggregatesInput>
    OR?: Enumerable<EducationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EducationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SubstanceWhereInput = {
    AND?: Enumerable<SubstanceWhereInput>
    OR?: Enumerable<SubstanceWhereInput>
    NOT?: Enumerable<SubstanceWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    firstSubstance?: PostListRelationFilter
    secondSubstance?: PostListRelationFilter
  }

  export type SubstanceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstSubstance?: PostOrderByRelationAggregateInput
    secondSubstance?: PostOrderByRelationAggregateInput
  }

  export type SubstanceWhereUniqueInput = {
    id?: number
  }

  export type SubstanceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubstanceCountOrderByAggregateInput
    _avg?: SubstanceAvgOrderByAggregateInput
    _max?: SubstanceMaxOrderByAggregateInput
    _min?: SubstanceMinOrderByAggregateInput
    _sum?: SubstanceSumOrderByAggregateInput
  }

  export type SubstanceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SubstanceScalarWhereWithAggregatesInput>
    OR?: Enumerable<SubstanceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SubstanceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    firstSubstanceId?: IntFilter | number
    secondSubstanceId?: IntFilter | number
    recommendedId?: IntFilter | number
    description?: StringFilter | string
    content?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    specialistId?: IntFilter | number
    specialist?: XOR<SpecialistRelationFilter, SpecialistWhereInput>
    firstSubstance?: XOR<SubstanceRelationFilter, SubstanceWhereInput>
    secondSubstance?: XOR<SubstanceRelationFilter, SubstanceWhereInput>
    recommended?: XOR<RecommendedRelationFilter, RecommendedWhereInput>
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialistId?: SortOrder
    specialist?: SpecialistOrderByWithRelationInput
    firstSubstance?: SubstanceOrderByWithRelationInput
    secondSubstance?: SubstanceOrderByWithRelationInput
    recommended?: RecommendedOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialistId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstSubstanceId?: IntWithAggregatesFilter | number
    secondSubstanceId?: IntWithAggregatesFilter | number
    recommendedId?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    specialistId?: IntWithAggregatesFilter | number
  }

  export type RecommendedWhereInput = {
    AND?: Enumerable<RecommendedWhereInput>
    OR?: Enumerable<RecommendedWhereInput>
    NOT?: Enumerable<RecommendedWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: PostListRelationFilter
  }

  export type RecommendedOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: PostOrderByRelationAggregateInput
  }

  export type RecommendedWhereUniqueInput = {
    id?: number
  }

  export type RecommendedOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecommendedCountOrderByAggregateInput
    _avg?: RecommendedAvgOrderByAggregateInput
    _max?: RecommendedMaxOrderByAggregateInput
    _min?: RecommendedMinOrderByAggregateInput
    _sum?: RecommendedSumOrderByAggregateInput
  }

  export type RecommendedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecommendedScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecommendedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecommendedScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SpecialistCreateInput = {
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutSpecialistInput
    fieldOfWork: FieldOfWorkCreateNestedOneWithoutSpecialistsInput
    education: EducationCreateNestedOneWithoutSpecialistsInput
  }

  export type SpecialistUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    fieldOfWorkId: number
    educationId: number
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutSpecialistNestedInput
    fieldOfWork?: FieldOfWorkUpdateOneRequiredWithoutSpecialistsNestedInput
    education?: EducationUpdateOneRequiredWithoutSpecialistsNestedInput
  }

  export type SpecialistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    fieldOfWorkId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    fieldOfWorkId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOfWorkCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialists?: SpecialistCreateNestedManyWithoutFieldOfWorkInput
  }

  export type FieldOfWorkUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialists?: SpecialistUncheckedCreateNestedManyWithoutFieldOfWorkInput
  }

  export type FieldOfWorkUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialists?: SpecialistUpdateManyWithoutFieldOfWorkNestedInput
  }

  export type FieldOfWorkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialists?: SpecialistUncheckedUpdateManyWithoutFieldOfWorkNestedInput
  }

  export type FieldOfWorkUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOfWorkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialists?: SpecialistCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialists?: SpecialistUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialists?: SpecialistUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialists?: SpecialistUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstanceCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstSubstance?: PostCreateNestedManyWithoutFirstSubstanceInput
    secondSubstance?: PostCreateNestedManyWithoutSecondSubstanceInput
  }

  export type SubstanceUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstSubstance?: PostUncheckedCreateNestedManyWithoutFirstSubstanceInput
    secondSubstance?: PostUncheckedCreateNestedManyWithoutSecondSubstanceInput
  }

  export type SubstanceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstSubstance?: PostUpdateManyWithoutFirstSubstanceNestedInput
    secondSubstance?: PostUpdateManyWithoutSecondSubstanceNestedInput
  }

  export type SubstanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstSubstance?: PostUncheckedUpdateManyWithoutFirstSubstanceNestedInput
    secondSubstance?: PostUncheckedUpdateManyWithoutSecondSubstanceNestedInput
  }

  export type SubstanceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialist: SpecialistCreateNestedOneWithoutPostsInput
    firstSubstance: SubstanceCreateNestedOneWithoutFirstSubstanceInput
    secondSubstance: SubstanceCreateNestedOneWithoutSecondSubstanceInput
    recommended: RecommendedCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    firstSubstanceId: number
    secondSubstanceId: number
    recommendedId: number
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialistId: number
  }

  export type PostUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialist?: SpecialistUpdateOneRequiredWithoutPostsNestedInput
    firstSubstance?: SubstanceUpdateOneRequiredWithoutFirstSubstanceNestedInput
    secondSubstance?: SubstanceUpdateOneRequiredWithoutSecondSubstanceNestedInput
    recommended?: RecommendedUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }

  export type RecommendedCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutRecommendedInput
  }

  export type RecommendedUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutRecommendedInput
  }

  export type RecommendedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutRecommendedNestedInput
  }

  export type RecommendedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutRecommendedNestedInput
  }

  export type RecommendedUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type FieldOfWorkRelationFilter = {
    is?: FieldOfWorkWhereInput
    isNot?: FieldOfWorkWhereInput
  }

  export type EducationRelationFilter = {
    is?: EducationWhereInput
    isNot?: EducationWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SpecialistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    mobile?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
    profession?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpecialistAvgOrderByAggregateInput = {
    id?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
  }

  export type SpecialistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    mobile?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
    profession?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpecialistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    mobile?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
    profession?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpecialistSumOrderByAggregateInput = {
    id?: SortOrder
    fieldOfWorkId?: SortOrder
    educationId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SpecialistListRelationFilter = {
    every?: SpecialistWhereInput
    some?: SpecialistWhereInput
    none?: SpecialistWhereInput
  }

  export type SpecialistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FieldOfWorkCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldOfWorkAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FieldOfWorkMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldOfWorkMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldOfWorkSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EducationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubstanceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubstanceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubstanceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubstanceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubstanceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SpecialistRelationFilter = {
    is?: SpecialistWhereInput
    isNot?: SpecialistWhereInput
  }

  export type SubstanceRelationFilter = {
    is?: SubstanceWhereInput
    isNot?: SubstanceWhereInput
  }

  export type RecommendedRelationFilter = {
    is?: RecommendedWhereInput
    isNot?: RecommendedWhereInput
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialistId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    specialistId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialistId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    specialistId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    firstSubstanceId?: SortOrder
    secondSubstanceId?: SortOrder
    recommendedId?: SortOrder
    specialistId?: SortOrder
  }

  export type RecommendedCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendedAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RecommendedMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendedMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendedSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<Enumerable<PostCreateWithoutSpecialistInput>, Enumerable<PostUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSpecialistInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type FieldOfWorkCreateNestedOneWithoutSpecialistsInput = {
    create?: XOR<FieldOfWorkCreateWithoutSpecialistsInput, FieldOfWorkUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: FieldOfWorkCreateOrConnectWithoutSpecialistsInput
    connect?: FieldOfWorkWhereUniqueInput
  }

  export type EducationCreateNestedOneWithoutSpecialistsInput = {
    create?: XOR<EducationCreateWithoutSpecialistsInput, EducationUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: EducationCreateOrConnectWithoutSpecialistsInput
    connect?: EducationWhereUniqueInput
  }

  export type PostUncheckedCreateNestedManyWithoutSpecialistInput = {
    create?: XOR<Enumerable<PostCreateWithoutSpecialistInput>, Enumerable<PostUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSpecialistInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PostUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutSpecialistInput>, Enumerable<PostUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSpecialistInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutSpecialistInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutSpecialistInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutSpecialistInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type FieldOfWorkUpdateOneRequiredWithoutSpecialistsNestedInput = {
    create?: XOR<FieldOfWorkCreateWithoutSpecialistsInput, FieldOfWorkUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: FieldOfWorkCreateOrConnectWithoutSpecialistsInput
    upsert?: FieldOfWorkUpsertWithoutSpecialistsInput
    connect?: FieldOfWorkWhereUniqueInput
    update?: XOR<FieldOfWorkUpdateWithoutSpecialistsInput, FieldOfWorkUncheckedUpdateWithoutSpecialistsInput>
  }

  export type EducationUpdateOneRequiredWithoutSpecialistsNestedInput = {
    create?: XOR<EducationCreateWithoutSpecialistsInput, EducationUncheckedCreateWithoutSpecialistsInput>
    connectOrCreate?: EducationCreateOrConnectWithoutSpecialistsInput
    upsert?: EducationUpsertWithoutSpecialistsInput
    connect?: EducationWhereUniqueInput
    update?: XOR<EducationUpdateWithoutSpecialistsInput, EducationUncheckedUpdateWithoutSpecialistsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUncheckedUpdateManyWithoutSpecialistNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutSpecialistInput>, Enumerable<PostUncheckedCreateWithoutSpecialistInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSpecialistInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutSpecialistInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutSpecialistInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutSpecialistInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type SpecialistCreateNestedManyWithoutFieldOfWorkInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutFieldOfWorkInput>, Enumerable<SpecialistUncheckedCreateWithoutFieldOfWorkInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutFieldOfWorkInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type SpecialistUncheckedCreateNestedManyWithoutFieldOfWorkInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutFieldOfWorkInput>, Enumerable<SpecialistUncheckedCreateWithoutFieldOfWorkInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutFieldOfWorkInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type SpecialistUpdateManyWithoutFieldOfWorkNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutFieldOfWorkInput>, Enumerable<SpecialistUncheckedCreateWithoutFieldOfWorkInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutFieldOfWorkInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutFieldOfWorkInput>
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutFieldOfWorkInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutFieldOfWorkInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type SpecialistUncheckedUpdateManyWithoutFieldOfWorkNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutFieldOfWorkInput>, Enumerable<SpecialistUncheckedCreateWithoutFieldOfWorkInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutFieldOfWorkInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutFieldOfWorkInput>
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutFieldOfWorkInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutFieldOfWorkInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type SpecialistCreateNestedManyWithoutEducationInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutEducationInput>, Enumerable<SpecialistUncheckedCreateWithoutEducationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutEducationInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type SpecialistUncheckedCreateNestedManyWithoutEducationInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutEducationInput>, Enumerable<SpecialistUncheckedCreateWithoutEducationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutEducationInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
  }

  export type SpecialistUpdateManyWithoutEducationNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutEducationInput>, Enumerable<SpecialistUncheckedCreateWithoutEducationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutEducationInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutEducationInput>
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutEducationInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutEducationInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type SpecialistUncheckedUpdateManyWithoutEducationNestedInput = {
    create?: XOR<Enumerable<SpecialistCreateWithoutEducationInput>, Enumerable<SpecialistUncheckedCreateWithoutEducationInput>>
    connectOrCreate?: Enumerable<SpecialistCreateOrConnectWithoutEducationInput>
    upsert?: Enumerable<SpecialistUpsertWithWhereUniqueWithoutEducationInput>
    set?: Enumerable<SpecialistWhereUniqueInput>
    disconnect?: Enumerable<SpecialistWhereUniqueInput>
    delete?: Enumerable<SpecialistWhereUniqueInput>
    connect?: Enumerable<SpecialistWhereUniqueInput>
    update?: Enumerable<SpecialistUpdateWithWhereUniqueWithoutEducationInput>
    updateMany?: Enumerable<SpecialistUpdateManyWithWhereWithoutEducationInput>
    deleteMany?: Enumerable<SpecialistScalarWhereInput>
  }

  export type PostCreateNestedManyWithoutFirstSubstanceInput = {
    create?: XOR<Enumerable<PostCreateWithoutFirstSubstanceInput>, Enumerable<PostUncheckedCreateWithoutFirstSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutFirstSubstanceInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostCreateNestedManyWithoutSecondSubstanceInput = {
    create?: XOR<Enumerable<PostCreateWithoutSecondSubstanceInput>, Enumerable<PostUncheckedCreateWithoutSecondSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSecondSubstanceInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutFirstSubstanceInput = {
    create?: XOR<Enumerable<PostCreateWithoutFirstSubstanceInput>, Enumerable<PostUncheckedCreateWithoutFirstSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutFirstSubstanceInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutSecondSubstanceInput = {
    create?: XOR<Enumerable<PostCreateWithoutSecondSubstanceInput>, Enumerable<PostUncheckedCreateWithoutSecondSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSecondSubstanceInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUpdateManyWithoutFirstSubstanceNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutFirstSubstanceInput>, Enumerable<PostUncheckedCreateWithoutFirstSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutFirstSubstanceInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutFirstSubstanceInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutFirstSubstanceInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutFirstSubstanceInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUpdateManyWithoutSecondSubstanceNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutSecondSubstanceInput>, Enumerable<PostUncheckedCreateWithoutSecondSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSecondSubstanceInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutSecondSubstanceInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutSecondSubstanceInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutSecondSubstanceInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutFirstSubstanceNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutFirstSubstanceInput>, Enumerable<PostUncheckedCreateWithoutFirstSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutFirstSubstanceInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutFirstSubstanceInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutFirstSubstanceInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutFirstSubstanceInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutSecondSubstanceNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutSecondSubstanceInput>, Enumerable<PostUncheckedCreateWithoutSecondSubstanceInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutSecondSubstanceInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutSecondSubstanceInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutSecondSubstanceInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutSecondSubstanceInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type SpecialistCreateNestedOneWithoutPostsInput = {
    create?: XOR<SpecialistCreateWithoutPostsInput, SpecialistUncheckedCreateWithoutPostsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutPostsInput
    connect?: SpecialistWhereUniqueInput
  }

  export type SubstanceCreateNestedOneWithoutFirstSubstanceInput = {
    create?: XOR<SubstanceCreateWithoutFirstSubstanceInput, SubstanceUncheckedCreateWithoutFirstSubstanceInput>
    connectOrCreate?: SubstanceCreateOrConnectWithoutFirstSubstanceInput
    connect?: SubstanceWhereUniqueInput
  }

  export type SubstanceCreateNestedOneWithoutSecondSubstanceInput = {
    create?: XOR<SubstanceCreateWithoutSecondSubstanceInput, SubstanceUncheckedCreateWithoutSecondSubstanceInput>
    connectOrCreate?: SubstanceCreateOrConnectWithoutSecondSubstanceInput
    connect?: SubstanceWhereUniqueInput
  }

  export type RecommendedCreateNestedOneWithoutPostsInput = {
    create?: XOR<RecommendedCreateWithoutPostsInput, RecommendedUncheckedCreateWithoutPostsInput>
    connectOrCreate?: RecommendedCreateOrConnectWithoutPostsInput
    connect?: RecommendedWhereUniqueInput
  }

  export type SpecialistUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<SpecialistCreateWithoutPostsInput, SpecialistUncheckedCreateWithoutPostsInput>
    connectOrCreate?: SpecialistCreateOrConnectWithoutPostsInput
    upsert?: SpecialistUpsertWithoutPostsInput
    connect?: SpecialistWhereUniqueInput
    update?: XOR<SpecialistUpdateWithoutPostsInput, SpecialistUncheckedUpdateWithoutPostsInput>
  }

  export type SubstanceUpdateOneRequiredWithoutFirstSubstanceNestedInput = {
    create?: XOR<SubstanceCreateWithoutFirstSubstanceInput, SubstanceUncheckedCreateWithoutFirstSubstanceInput>
    connectOrCreate?: SubstanceCreateOrConnectWithoutFirstSubstanceInput
    upsert?: SubstanceUpsertWithoutFirstSubstanceInput
    connect?: SubstanceWhereUniqueInput
    update?: XOR<SubstanceUpdateWithoutFirstSubstanceInput, SubstanceUncheckedUpdateWithoutFirstSubstanceInput>
  }

  export type SubstanceUpdateOneRequiredWithoutSecondSubstanceNestedInput = {
    create?: XOR<SubstanceCreateWithoutSecondSubstanceInput, SubstanceUncheckedCreateWithoutSecondSubstanceInput>
    connectOrCreate?: SubstanceCreateOrConnectWithoutSecondSubstanceInput
    upsert?: SubstanceUpsertWithoutSecondSubstanceInput
    connect?: SubstanceWhereUniqueInput
    update?: XOR<SubstanceUpdateWithoutSecondSubstanceInput, SubstanceUncheckedUpdateWithoutSecondSubstanceInput>
  }

  export type RecommendedUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<RecommendedCreateWithoutPostsInput, RecommendedUncheckedCreateWithoutPostsInput>
    connectOrCreate?: RecommendedCreateOrConnectWithoutPostsInput
    upsert?: RecommendedUpsertWithoutPostsInput
    connect?: RecommendedWhereUniqueInput
    update?: XOR<RecommendedUpdateWithoutPostsInput, RecommendedUncheckedUpdateWithoutPostsInput>
  }

  export type PostCreateNestedManyWithoutRecommendedInput = {
    create?: XOR<Enumerable<PostCreateWithoutRecommendedInput>, Enumerable<PostUncheckedCreateWithoutRecommendedInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutRecommendedInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutRecommendedInput = {
    create?: XOR<Enumerable<PostCreateWithoutRecommendedInput>, Enumerable<PostUncheckedCreateWithoutRecommendedInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutRecommendedInput>
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type PostUpdateManyWithoutRecommendedNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutRecommendedInput>, Enumerable<PostUncheckedCreateWithoutRecommendedInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutRecommendedInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutRecommendedInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutRecommendedInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutRecommendedInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutRecommendedNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutRecommendedInput>, Enumerable<PostUncheckedCreateWithoutRecommendedInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutRecommendedInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutRecommendedInput>
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutRecommendedInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutRecommendedInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PostCreateWithoutSpecialistInput = {
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstSubstance: SubstanceCreateNestedOneWithoutFirstSubstanceInput
    secondSubstance: SubstanceCreateNestedOneWithoutSecondSubstanceInput
    recommended: RecommendedCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutSpecialistInput = {
    id?: number
    firstSubstanceId: number
    secondSubstanceId: number
    recommendedId: number
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateOrConnectWithoutSpecialistInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSpecialistInput, PostUncheckedCreateWithoutSpecialistInput>
  }

  export type FieldOfWorkCreateWithoutSpecialistsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldOfWorkUncheckedCreateWithoutSpecialistsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldOfWorkCreateOrConnectWithoutSpecialistsInput = {
    where: FieldOfWorkWhereUniqueInput
    create: XOR<FieldOfWorkCreateWithoutSpecialistsInput, FieldOfWorkUncheckedCreateWithoutSpecialistsInput>
  }

  export type EducationCreateWithoutSpecialistsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EducationUncheckedCreateWithoutSpecialistsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EducationCreateOrConnectWithoutSpecialistsInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutSpecialistsInput, EducationUncheckedCreateWithoutSpecialistsInput>
  }

  export type PostUpsertWithWhereUniqueWithoutSpecialistInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutSpecialistInput, PostUncheckedUpdateWithoutSpecialistInput>
    create: XOR<PostCreateWithoutSpecialistInput, PostUncheckedCreateWithoutSpecialistInput>
  }

  export type PostUpdateWithWhereUniqueWithoutSpecialistInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutSpecialistInput, PostUncheckedUpdateWithoutSpecialistInput>
  }

  export type PostUpdateManyWithWhereWithoutSpecialistInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    firstSubstanceId?: IntFilter | number
    secondSubstanceId?: IntFilter | number
    recommendedId?: IntFilter | number
    description?: StringFilter | string
    content?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    specialistId?: IntFilter | number
  }

  export type FieldOfWorkUpsertWithoutSpecialistsInput = {
    update: XOR<FieldOfWorkUpdateWithoutSpecialistsInput, FieldOfWorkUncheckedUpdateWithoutSpecialistsInput>
    create: XOR<FieldOfWorkCreateWithoutSpecialistsInput, FieldOfWorkUncheckedCreateWithoutSpecialistsInput>
  }

  export type FieldOfWorkUpdateWithoutSpecialistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldOfWorkUncheckedUpdateWithoutSpecialistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUpsertWithoutSpecialistsInput = {
    update: XOR<EducationUpdateWithoutSpecialistsInput, EducationUncheckedUpdateWithoutSpecialistsInput>
    create: XOR<EducationCreateWithoutSpecialistsInput, EducationUncheckedCreateWithoutSpecialistsInput>
  }

  export type EducationUpdateWithoutSpecialistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EducationUncheckedUpdateWithoutSpecialistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialistCreateWithoutFieldOfWorkInput = {
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutSpecialistInput
    education: EducationCreateNestedOneWithoutSpecialistsInput
  }

  export type SpecialistUncheckedCreateWithoutFieldOfWorkInput = {
    id?: number
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    educationId: number
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutFieldOfWorkInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutFieldOfWorkInput, SpecialistUncheckedCreateWithoutFieldOfWorkInput>
  }

  export type SpecialistUpsertWithWhereUniqueWithoutFieldOfWorkInput = {
    where: SpecialistWhereUniqueInput
    update: XOR<SpecialistUpdateWithoutFieldOfWorkInput, SpecialistUncheckedUpdateWithoutFieldOfWorkInput>
    create: XOR<SpecialistCreateWithoutFieldOfWorkInput, SpecialistUncheckedCreateWithoutFieldOfWorkInput>
  }

  export type SpecialistUpdateWithWhereUniqueWithoutFieldOfWorkInput = {
    where: SpecialistWhereUniqueInput
    data: XOR<SpecialistUpdateWithoutFieldOfWorkInput, SpecialistUncheckedUpdateWithoutFieldOfWorkInput>
  }

  export type SpecialistUpdateManyWithWhereWithoutFieldOfWorkInput = {
    where: SpecialistScalarWhereInput
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyWithoutSpecialistsInput>
  }

  export type SpecialistScalarWhereInput = {
    AND?: Enumerable<SpecialistScalarWhereInput>
    OR?: Enumerable<SpecialistScalarWhereInput>
    NOT?: Enumerable<SpecialistScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    cpf?: StringFilter | string
    mobile?: StringFilter | string
    fieldOfWorkId?: IntFilter | number
    educationId?: IntFilter | number
    profession?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SpecialistCreateWithoutEducationInput = {
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutSpecialistInput
    fieldOfWork: FieldOfWorkCreateNestedOneWithoutSpecialistsInput
  }

  export type SpecialistUncheckedCreateWithoutEducationInput = {
    id?: number
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    fieldOfWorkId: number
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutSpecialistInput
  }

  export type SpecialistCreateOrConnectWithoutEducationInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutEducationInput, SpecialistUncheckedCreateWithoutEducationInput>
  }

  export type SpecialistUpsertWithWhereUniqueWithoutEducationInput = {
    where: SpecialistWhereUniqueInput
    update: XOR<SpecialistUpdateWithoutEducationInput, SpecialistUncheckedUpdateWithoutEducationInput>
    create: XOR<SpecialistCreateWithoutEducationInput, SpecialistUncheckedCreateWithoutEducationInput>
  }

  export type SpecialistUpdateWithWhereUniqueWithoutEducationInput = {
    where: SpecialistWhereUniqueInput
    data: XOR<SpecialistUpdateWithoutEducationInput, SpecialistUncheckedUpdateWithoutEducationInput>
  }

  export type SpecialistUpdateManyWithWhereWithoutEducationInput = {
    where: SpecialistScalarWhereInput
    data: XOR<SpecialistUpdateManyMutationInput, SpecialistUncheckedUpdateManyWithoutSpecialistsInput>
  }

  export type PostCreateWithoutFirstSubstanceInput = {
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialist: SpecialistCreateNestedOneWithoutPostsInput
    secondSubstance: SubstanceCreateNestedOneWithoutSecondSubstanceInput
    recommended: RecommendedCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutFirstSubstanceInput = {
    id?: number
    secondSubstanceId: number
    recommendedId: number
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialistId: number
  }

  export type PostCreateOrConnectWithoutFirstSubstanceInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutFirstSubstanceInput, PostUncheckedCreateWithoutFirstSubstanceInput>
  }

  export type PostCreateWithoutSecondSubstanceInput = {
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialist: SpecialistCreateNestedOneWithoutPostsInput
    firstSubstance: SubstanceCreateNestedOneWithoutFirstSubstanceInput
    recommended: RecommendedCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutSecondSubstanceInput = {
    id?: number
    firstSubstanceId: number
    recommendedId: number
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialistId: number
  }

  export type PostCreateOrConnectWithoutSecondSubstanceInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSecondSubstanceInput, PostUncheckedCreateWithoutSecondSubstanceInput>
  }

  export type PostUpsertWithWhereUniqueWithoutFirstSubstanceInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutFirstSubstanceInput, PostUncheckedUpdateWithoutFirstSubstanceInput>
    create: XOR<PostCreateWithoutFirstSubstanceInput, PostUncheckedCreateWithoutFirstSubstanceInput>
  }

  export type PostUpdateWithWhereUniqueWithoutFirstSubstanceInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutFirstSubstanceInput, PostUncheckedUpdateWithoutFirstSubstanceInput>
  }

  export type PostUpdateManyWithWhereWithoutFirstSubstanceInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutFirstSubstanceInput>
  }

  export type PostUpsertWithWhereUniqueWithoutSecondSubstanceInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutSecondSubstanceInput, PostUncheckedUpdateWithoutSecondSubstanceInput>
    create: XOR<PostCreateWithoutSecondSubstanceInput, PostUncheckedCreateWithoutSecondSubstanceInput>
  }

  export type PostUpdateWithWhereUniqueWithoutSecondSubstanceInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutSecondSubstanceInput, PostUncheckedUpdateWithoutSecondSubstanceInput>
  }

  export type PostUpdateManyWithWhereWithoutSecondSubstanceInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutSecondSubstanceInput>
  }

  export type SpecialistCreateWithoutPostsInput = {
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldOfWork: FieldOfWorkCreateNestedOneWithoutSpecialistsInput
    education: EducationCreateNestedOneWithoutSpecialistsInput
  }

  export type SpecialistUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    email: string
    password: string
    cpf: string
    mobile: string
    fieldOfWorkId: number
    educationId: number
    profession: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpecialistCreateOrConnectWithoutPostsInput = {
    where: SpecialistWhereUniqueInput
    create: XOR<SpecialistCreateWithoutPostsInput, SpecialistUncheckedCreateWithoutPostsInput>
  }

  export type SubstanceCreateWithoutFirstSubstanceInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secondSubstance?: PostCreateNestedManyWithoutSecondSubstanceInput
  }

  export type SubstanceUncheckedCreateWithoutFirstSubstanceInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    secondSubstance?: PostUncheckedCreateNestedManyWithoutSecondSubstanceInput
  }

  export type SubstanceCreateOrConnectWithoutFirstSubstanceInput = {
    where: SubstanceWhereUniqueInput
    create: XOR<SubstanceCreateWithoutFirstSubstanceInput, SubstanceUncheckedCreateWithoutFirstSubstanceInput>
  }

  export type SubstanceCreateWithoutSecondSubstanceInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstSubstance?: PostCreateNestedManyWithoutFirstSubstanceInput
  }

  export type SubstanceUncheckedCreateWithoutSecondSubstanceInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstSubstance?: PostUncheckedCreateNestedManyWithoutFirstSubstanceInput
  }

  export type SubstanceCreateOrConnectWithoutSecondSubstanceInput = {
    where: SubstanceWhereUniqueInput
    create: XOR<SubstanceCreateWithoutSecondSubstanceInput, SubstanceUncheckedCreateWithoutSecondSubstanceInput>
  }

  export type RecommendedCreateWithoutPostsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendedUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendedCreateOrConnectWithoutPostsInput = {
    where: RecommendedWhereUniqueInput
    create: XOR<RecommendedCreateWithoutPostsInput, RecommendedUncheckedCreateWithoutPostsInput>
  }

  export type SpecialistUpsertWithoutPostsInput = {
    update: XOR<SpecialistUpdateWithoutPostsInput, SpecialistUncheckedUpdateWithoutPostsInput>
    create: XOR<SpecialistCreateWithoutPostsInput, SpecialistUncheckedCreateWithoutPostsInput>
  }

  export type SpecialistUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldOfWork?: FieldOfWorkUpdateOneRequiredWithoutSpecialistsNestedInput
    education?: EducationUpdateOneRequiredWithoutSpecialistsNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    fieldOfWorkId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstanceUpsertWithoutFirstSubstanceInput = {
    update: XOR<SubstanceUpdateWithoutFirstSubstanceInput, SubstanceUncheckedUpdateWithoutFirstSubstanceInput>
    create: XOR<SubstanceCreateWithoutFirstSubstanceInput, SubstanceUncheckedCreateWithoutFirstSubstanceInput>
  }

  export type SubstanceUpdateWithoutFirstSubstanceInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secondSubstance?: PostUpdateManyWithoutSecondSubstanceNestedInput
  }

  export type SubstanceUncheckedUpdateWithoutFirstSubstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    secondSubstance?: PostUncheckedUpdateManyWithoutSecondSubstanceNestedInput
  }

  export type SubstanceUpsertWithoutSecondSubstanceInput = {
    update: XOR<SubstanceUpdateWithoutSecondSubstanceInput, SubstanceUncheckedUpdateWithoutSecondSubstanceInput>
    create: XOR<SubstanceCreateWithoutSecondSubstanceInput, SubstanceUncheckedCreateWithoutSecondSubstanceInput>
  }

  export type SubstanceUpdateWithoutSecondSubstanceInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstSubstance?: PostUpdateManyWithoutFirstSubstanceNestedInput
  }

  export type SubstanceUncheckedUpdateWithoutSecondSubstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstSubstance?: PostUncheckedUpdateManyWithoutFirstSubstanceNestedInput
  }

  export type RecommendedUpsertWithoutPostsInput = {
    update: XOR<RecommendedUpdateWithoutPostsInput, RecommendedUncheckedUpdateWithoutPostsInput>
    create: XOR<RecommendedCreateWithoutPostsInput, RecommendedUncheckedCreateWithoutPostsInput>
  }

  export type RecommendedUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendedUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateWithoutRecommendedInput = {
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialist: SpecialistCreateNestedOneWithoutPostsInput
    firstSubstance: SubstanceCreateNestedOneWithoutFirstSubstanceInput
    secondSubstance: SubstanceCreateNestedOneWithoutSecondSubstanceInput
  }

  export type PostUncheckedCreateWithoutRecommendedInput = {
    id?: number
    firstSubstanceId: number
    secondSubstanceId: number
    description: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    specialistId: number
  }

  export type PostCreateOrConnectWithoutRecommendedInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutRecommendedInput, PostUncheckedCreateWithoutRecommendedInput>
  }

  export type PostUpsertWithWhereUniqueWithoutRecommendedInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutRecommendedInput, PostUncheckedUpdateWithoutRecommendedInput>
    create: XOR<PostCreateWithoutRecommendedInput, PostUncheckedCreateWithoutRecommendedInput>
  }

  export type PostUpdateWithWhereUniqueWithoutRecommendedInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutRecommendedInput, PostUncheckedUpdateWithoutRecommendedInput>
  }

  export type PostUpdateManyWithWhereWithoutRecommendedInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostUpdateWithoutSpecialistInput = {
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstSubstance?: SubstanceUpdateOneRequiredWithoutFirstSubstanceNestedInput
    secondSubstance?: SubstanceUpdateOneRequiredWithoutSecondSubstanceNestedInput
    recommended?: RecommendedUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutSpecialistInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialistUpdateWithoutFieldOfWorkInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutSpecialistNestedInput
    education?: EducationUpdateOneRequiredWithoutSpecialistsNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutFieldOfWorkInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    educationId?: IntFieldUpdateOperationsInput | number
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type SpecialistUncheckedUpdateManyWithoutSpecialistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    educationId?: IntFieldUpdateOperationsInput | number
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialistUpdateWithoutEducationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutSpecialistNestedInput
    fieldOfWork?: FieldOfWorkUpdateOneRequiredWithoutSpecialistsNestedInput
  }

  export type SpecialistUncheckedUpdateWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    fieldOfWorkId?: IntFieldUpdateOperationsInput | number
    profession?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutSpecialistNestedInput
  }

  export type PostUpdateWithoutFirstSubstanceInput = {
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialist?: SpecialistUpdateOneRequiredWithoutPostsNestedInput
    secondSubstance?: SubstanceUpdateOneRequiredWithoutSecondSubstanceNestedInput
    recommended?: RecommendedUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutFirstSubstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUncheckedUpdateManyWithoutFirstSubstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutSecondSubstanceInput = {
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialist?: SpecialistUpdateOneRequiredWithoutPostsNestedInput
    firstSubstance?: SubstanceUpdateOneRequiredWithoutFirstSubstanceNestedInput
    recommended?: RecommendedUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutSecondSubstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUncheckedUpdateManyWithoutSecondSubstanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    recommendedId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutRecommendedInput = {
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialist?: SpecialistUpdateOneRequiredWithoutPostsNestedInput
    firstSubstance?: SubstanceUpdateOneRequiredWithoutFirstSubstanceNestedInput
    secondSubstance?: SubstanceUpdateOneRequiredWithoutSecondSubstanceNestedInput
  }

  export type PostUncheckedUpdateWithoutRecommendedInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstSubstanceId?: IntFieldUpdateOperationsInput | number
    secondSubstanceId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    specialistId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}